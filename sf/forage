#!/usr/bin/env python3
#
# usage: sourceforge [-h] [-v] infiles [infiles ...]
#
# Discovers and generates PHP exploits automatically (via sourceforge) from NVD
# json data feed
#
# positional arguments:
#   infiles         Compressed json file as downloaded from NVD's website, e.g.
#                   https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-2018.json
#                   .gz
#
# optional arguments:
#   -h, --help      show this help message and exit
#   -v, --verified  Run only CVEs that have been verified to work end-to-end

import os
import sys

# Make sure that the HACCSTA2_HOME env var is set, since we need to add this to
# our python path.
haccs_ta2_home = os.environ.get('HACCSTA2_HOME')
if haccs_ta2_home is None:
    print(
        'ERROR: HACCSTA2_HOME is not set (this should point to the root of '
        'the \'haccs-ta2\' repo)',
        file=sys.stderr
    )
    exit(1)
sys.path.append(os.path.join(haccs_ta2_home, 'cve2'))
from cve import CVE, Product

import argparse
import glob
import gzip
import json
import shutil
import signal

from impl.scrapers import SourceforgeScraper
from impl.utils.constants import CAPABLE_OF_WORKING, FORAGED_OUT_DIR
from impl.utils.file import read_all_lines
from impl.utils.logging import ItemizedLogger


def main(cmd_line):
    # Parse through all NVD files specified on the command line:
    nvd_inputs = []
    for infile in cmd_line.infiles:
        if ("gz" in infile):
            with gzip.GzipFile(infile, 'r') as f:
                input = (json.load(f))
                input['filename'] = infile
                nvd_inputs.append(input)
        else:
            with open(infile, 'r') as f:
                input = (json.load(f))
                input['filename'] = infile
                nvd_inputs.append(input)

    # Block all signals for now, but may decide to include SIGINT at some point.
    signal.pthread_sigmask(signal.SIG_BLOCK, signal.valid_signals())

    # This directory is commit, so it should be there obviously, but just in
    # case...
    if not os.path.isdir(FORAGED_OUT_DIR):
        print(
            'ERROR: \'%s\' does not exist or is not a directory!' %
            FORAGED_OUT_DIR,
            file=sys.stderr
        )
        exit(1)

    # Start from a fresh output directory for the foraged codebases.
    if cmd_line.clean:
        for file_or_dir in os.listdir(FORAGED_OUT_DIR):
            # Don't touch .gitignore, but everything else is fair game!
            if file_or_dir == '.gitignore':
                continue
            full_path = os.path.join(FORAGED_OUT_DIR, file_or_dir)
            if os.path.isdir(full_path):
                shutil.rmtree(full_path)
            elif os.path.isfile(full_path):
                os.remove(full_path)
            else:
                print(
                    'ERROR: "%s" is not a file or a directory' % full_path,
                    file=sys.stderr
                )
                exit(1)

    # Message that is printed upon a successful end-to-end exploit
    success_msg = read_all_lines('success.msg')

    log = ItemizedLogger()

    # For each json file, parse the CVE items and determine whther this is a
    # queriable SQL injection.
    for nvd_data in nvd_inputs:
        print(
            "Have %d CVEs to process from %s" %
            (len(nvd_data['CVE_Items']), nvd_data['filename'])
        )

        for cve_base in nvd_data['CVE_Items']:
            cve = CVE(cve_base)
            cve_pattern = os.path.join(FORAGED_OUT_DIR, f"{cve.cve.lower()}_*")
            matching_cve_dirs = glob.glob(cve_pattern, recursive=False)
            num_attempts = len(matching_cve_dirs)
            if num_attempts > 0:
                succ_pattern = os.path.join(cve_pattern, '*/.success')
                successful_cve_dirs = glob.glob(succ_pattern, recursive=False)
                num_successes = len(successful_cve_dirs)
                log.new_task(
                    f"Already foraged this CVE ({num_attempts}/{num_successes}"
                    ' runs succeeded)', title=cve.cve
                )
                successful_cve_dirs = [
                    os.path.dirname(x) for x in successful_cve_dirs
                ]
                if num_successes == 0:
                    log.info('Successful dockers: <None>')
                else:
                    if num_successes == 1:
                        fmt_msg = 'Successful dockers: %s'
                        successful_cves_str = successful_cve_dirs[0]
                    else:
                        fmt_msg = 'Successful dockers:\n    %s'
                        successful_cves_str = '\n    '.join(successful_cve_dirs)
                    log.info(fmt_msg % successful_cves_str)
                log.complete_task()
                continue

            # If we are only running CVEs that have been verified to work
            # end-to-end, and this CVE is not one that has been verified
            # to work, then skip this CVE.
            if cmd_line.verified and not cve.cve.lower() in \
                    CAPABLE_OF_WORKING.keys():
                continue

            # Make sure CPE information was found, so we can pull the version
            # number easily from this.
            if len(cve.cpe_list_flat) <= 0:
                continue

            sourceforge_scraper = \
                    SourceforgeScraper(cve, log, success_msg=success_msg,
                                       check_only_verified=cmd_line.verified)
            sourceforge_scraper.scrape_and_run_exploit()


def parse_args():
    """
    parse command line arguments
    """
    parser = argparse.ArgumentParser(
        description='Discovers and generates PHP '
        'exploits automatically (via sourceforge) from NVD json data feed'
    )
    parser.add_argument(
        'infiles',
        nargs="+",
        help="Compressed json file as downloaded from NVD's website, e.g. "
        "https://nvd.nist.gov/feeds/json/cve/1.0/nvdcve-1.0-2018.json.gz"
    )
    parser.add_argument(
        '-v',
        '--verified',
        action='store_true',
        help='Run only CVEs that have been verified to work end-to-end'
    )
    parser.add_argument(
        '-c',
        '--clean',
        action='store_true',
        help='Clears the foraged directory and starts foraging from scratch'
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    sys.exit(main(args))
