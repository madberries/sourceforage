#!/usr/bin/env python3
#
# usage: runexploit [-h] [-d] cve_dir
#
# Discovers and generates PHP exploits automatically (via sourceforge) from NVD
# json data feed
#
# positional arguments:
#   cve_dir       The root directory of the CVE docker
#
# optional arguments:
#   -h, --help        show this help message and exit
#   -d, --docker      Start up a new docker before running the exploit
#   -i, --no-install  Do not run the installation script in the docker, and
#                     execute the exploit as is

import argparse
import configparser
import os
import sys
import traceback

from impl.exploit_runner import run_exploit
from impl.utils.file import read_all_lines
from impl.utils.logging import ItemizedLogger, StepFailedException

def main(cmdline):
    # Perform some basic sanity checks on the CVE directory structure.
    cve_dir = cmdline.cve_dir[0]
    data_dir = os.path.join(cve_dir, 'data')
    cve_ini_file = os.path.join(cve_dir, '.cve.ini')
    if not os.path.exists(cve_dir):
        print(
            f"ERROR: CVE directory '{cve_dir}' does not exist",
            file=sys.stderr
        )
    elif not os.path.isdir(cve_dir):
        print(
            f"ERROR: CVE directory '{cve_dir}' is not a directory",
            file=sys.stderr
        )
    elif not os.path.isfile(os.path.join(cve_dir, "run.sh")):
        print('ERROR: Unable to locate run.sh script', file=sys.stderr)
    elif not os.path.isfile(cve_ini_file):
        print(
            'ERROR: Unable to locate .cve.ini configuration file',
            file=sys.stderr
        )
    elif not os.path.isdir(data_dir):
        print('ERROR: Unable to locate data/ directory', file=sys.stderr)
    else:
        # Everything appears to be normal, but let's see if the PHP
        # application directory is there before we declare success...
        path_to_codebase = None
        for file_or_dir in os.listdir(data_dir):
            full_path = os.path.join(data_dir, file_or_dir)
            if os.path.isdir(full_path):
                if path_to_codebase is not None:
                    print(
                        'ERROR: data/ directory contains more than one '
                        'directory',
                        file=sys.stderr
                    )
                    exit(1)
                path_to_codebase = full_path
        print(os.path.basename(cve_dir))

        # Read in the CVE ini file.
        config = configparser.ConfigParser()
        config.read(cve_ini_file)
        cve_section = config['cve']

        # Message that is printed upon a successful end-to-end exploit
        success_msg = read_all_lines('success.msg')

        # Extract the configuration variables needed for dockerization.
        cve = cve_section['id']

        log = ItemizedLogger()

        log.new_task(
            f"Running end-to-end exploit on {path_to_codebase}", title=cve
        )
        success = True
        try:
            success = run_exploit(
                cve.lower(), path_to_codebase, log, start_docker=cmdline.docker,
                skip_install=cmdline.no_install
            )
            if success:
                print(success_msg)
                log.success('Sucessfully triggered exploit')
            else:
                log.fail('Failed to trigger exploit')
        except StepFailedException:
            # Don't log these since it's obvious from the output that a
            # step failed
            success = False
        except:
            success = False
            log.log_exception(traceback.format_exc())
        finally:
            log.complete_task(success=success)


def parse_args():
    """
    parse command line arguments
    """
    parser = argparse.ArgumentParser(
        description='Discovers and generates PHP '
        'exploits automatically (via sourceforge) from NVD json data feed'
    )
    parser.add_argument(
        'cve_dir',
        nargs=1,
        help="The root directory of the CVE docker"
    )
    parser.add_argument(
        '-d',
        '--docker',
        action='store_true',
        help='Start up a new docker before running the exploit'
    )
    parser.add_argument(
        '-i',
        '--no-install',
        action='store_true',
        help='Do not run the installation script in the docker, and execute '
        'the exploit as is'
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    sys.exit(main(args))
