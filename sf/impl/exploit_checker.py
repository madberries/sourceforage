from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread

from .utils.constants import HTTP_SERVER_ADDR, HTTP_SERVER_PORT

# TODO: See if we can get rid of this global by somehow accessing the state of
# the handler.
globals()['received'] = False


class HTTPHandler(BaseHTTPRequestHandler):

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/x-shellscript")
        self.end_headers()
        self.wfile.write(bytes('#!/bin/sh\n\ntouch /tmp/TESTFILE\n\n', 'utf-8'))
        globals()['received'] = True


class ExploitChecker(Thread):

    def __init__(self, log):
        Thread.__init__(self)
        self.log = log
        self.result = False
        self.server = HTTPServer((HTTP_SERVER_ADDR, HTTP_SERVER_PORT),
                                 HTTPHandler)
        self.start()

    def run(self):
        self.log.debug(
            'Started http server on '
            f"{HTTP_SERVER_ADDR}:{HTTP_SERVER_PORT}"
        )
        self.server.handle_request()    # just handle one request
        self.result = globals()['received']
