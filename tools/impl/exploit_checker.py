from http.server import HTTPServer, BaseHTTPRequestHandler
from threading import Thread

http_server_addr = '172.17.0.1'
http_server_port = 5000

# TODO: See if we can get rid of this global by somehow accessing the state of
# the handler.
globals()['received'] = False

class HTTPHandler(BaseHTTPRequestHandler):
    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/x-shellscript")
        self.end_headers()
        self.wfile.write(bytes('#!/bin/sh\n\ntouch /tmp/TESTFILE\n\n', 'utf-8'))
        globals()['received'] = True

class ExploitChecker(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.result = False
        self.server = HTTPServer((http_server_addr, http_server_port),
                                 HTTPHandler)
        self.start()

    def run(self):
        print('Started http server on %s:%d' % (http_server_addr,
                                                http_server_port))
        self.server.handle_request()   # just handle one request
        self.result = globals()['received']
